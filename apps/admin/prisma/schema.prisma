generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ConversionFactors {
  id               Int             @id @unique(map: "id") @default(autoincrement())
  fromUnitId       Int
  fromUnit         MeasurementUnit @relation(fields: [fromUnitId], references: [id], name: "fromUnit")
  toUnitId         Int
  toUnit           MeasurementUnit @relation(fields: [toUnitId], references: [id], name: "toUnit")
  conversionFactor Decimal         @db.Decimal(10, 4)

  @@index([fromUnitId])
  @@index([toUnitId])
  @@map("conversion_factors")
}

model CreatedItem {
  id           Int      @id @unique(map: "id") @default(autoincrement())
  recipeId     Int
  recipe       Recipe   @relation(fields: [recipeId], references: [id])
  yieldCreated Int
  createdAt    DateTime @default(now()) @db.Timestamp(0)

  @@index([recipeId])
  @@map("created_item")
}

model ExternalCost {
  id        Int      @id @unique(map: "id") @default(autoincrement())
  name      String   @db.VarChar(255)
  cost      Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@map("external_cost")
}

model Ingredient {
  id               Int                  @id @unique(map: "id") @default(autoincrement())
  name             String               @db.VarChar(255)
  price            Price[]
  inventory        IngredientInventory?
  recipeIngredient RecipeIngredient[]
  createdAt        DateTime             @default(now()) @db.Timestamp(0)
  updatedAt        DateTime             @updatedAt @db.Timestamp(0)

  @@map("ingredient")
}

model IngredientInventory {
  id           Int                 @id @unique(map: "id") @default(autoincrement())
  ingredientId Int                 @unique(map: "ingredient__idx")
  ingredient   Ingredient          @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  unitId       Int
  unit         MeasurementUnit     @relation(fields: [unitId], references: [id])
  adds         InventoryAdd[]
  subtracts    InventorySubtract[]

  @@index([ingredientId])
  @@index([unitId])
  @@map("ingredient_inventory")
}

model InventoryAdd {
  id          Int                 @id @unique(map: "id") @default(autoincrement())
  inventoryId Int
  inventory   IngredientInventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  quantity    Decimal             @db.Decimal(10, 2)
  totalPrice  Decimal             @db.Decimal(10, 2)
  unitId      Int
  unit        MeasurementUnit     @relation(fields: [unitId], references: [id])
  createdAt   DateTime            @default(now()) @db.Timestamp(0)

  @@index([inventoryId])
  @@index([unitId])
  @@map("inventory_add")
}

model InventorySubtract {
  id          Int                 @id @unique(map: "id") @default(autoincrement())
  inventoryId Int
  inventory   IngredientInventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  quantity    Decimal             @db.Decimal(10, 2)
  unitId      Int
  unit        MeasurementUnit     @relation(fields: [unitId], references: [id])
  createdAt   DateTime            @default(now()) @db.Timestamp(0)

  @@index([inventoryId])
  @@index([unitId])
  @@map("invetory_subtract")
}

model Measurement {
  id       Int             @id @unique(map: "id") @default(autoincrement())
  priceId  Int             @unique(map: "price__idx")
  price    Price           @relation(fields: [priceId], references: [id], onDelete: Cascade)
  unitId   Int
  unit     MeasurementUnit @relation(fields: [unitId], references: [id])
  size     Decimal         @db.Decimal(10, 2)
  quantity Decimal         @db.Decimal(10, 2)
  mlToGram Decimal?        @db.Decimal(10, 4)

  @@index([unitId])
  @@map("measurement")
}

model MeasurementType {
  id   Int               @id @unique(map: "id") @default(autoincrement())
  unit MeasurementUnit[]
  name String            @db.VarChar(36)

  @@map("measurement_type")
}

model MeasurementUnit {
  id                   Int                   @id @unique(map: "id") @default(autoincrement())
  name                 String                @db.VarChar(36)
  conversionFactorTo   ConversionFactors[]   @relation("toUnit")
  conversionFactorFrom ConversionFactors[]   @relation("fromUnit")
  typeId               Int
  measurement          Measurement[]
  type                 MeasurementType       @relation(fields: [typeId], references: [id])
  abbreviation         String                @db.VarChar(36)
  inventory            IngredientInventory[]
  inventoryAdds        InventoryAdd[]
  inventorySubtracts   InventorySubtract[]
  recipeIngredient     RecipeIngredient[]

  @@index([typeId])
  @@map("measurement_unit")
}

model Price {
  id           Int          @id @unique(map: "id") @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient   @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  measurement  Measurement?
  createdAt    DateTime?    @default(now()) @db.Timestamp(0)
  price        Decimal      @db.Decimal(10, 2)

  @@index([ingredientId])
  @@map("price")
}

model Recipe {
  id           Int                  @id @unique(map: "id") @default(autoincrement())
  name         String               @db.VarChar(255)
  createdAt    DateTime             @default(now()) @db.Timestamp(0)
  yieldName    String               @db.VarChar(255)
  yieldCount   Int
  targetMargin Decimal              @db.Decimal(10, 2)
  sellQuantity Int
  description  String?              @db.Text
  ingredients  RecipeIngredient[]
  priceHistory RecipePriceHistory[]
  createdItems CreatedItem[]
  saleItem     SaleItem[]
  sellPrice    RecipeSellPrice[]

  @@map("recipe")
}

model RecipeSellPrice {
  id        Int        @id @unique(map: "id") @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  recipeId  Int
  recipe    Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  price     Decimal    @db.Decimal(10, 2)
  saleItem  SaleItem[]

  @@index([recipeId])
  @@map("recipe_sell_price")
}

model RecipeIngredient {
  id           Int             @id @unique(map: "id") @default(autoincrement())
  recipeId     Int
  recipe       Recipe          @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredientId Int
  ingredient   Ingredient      @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  size         Decimal         @db.Decimal(10, 2)
  unitId       Int
  unit         MeasurementUnit @relation(fields: [unitId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
  @@index([unitId])
  @@map("recipe_ingredient")
}

model RecipePriceHistory {
  id        Int      @id @unique(map: "id") @default(autoincrement())
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@index([recipeId])
  @@map("recipe_price_history")
}

model Sale {
  id       Int        @id @unique(map: "id") @default(autoincrement())
  saleItem SaleItem[]
  saleDate DateTime   @default(now()) @db.Timestamp(0)
  total    Decimal    @db.Decimal(10, 2)

  @@map("sale")
}

model SaleItem {
  id          Int             @id @unique(map: "id") @default(autoincrement())
  saleId      Int
  sale        Sale            @relation(fields: [saleId], references: [id], onDelete: Cascade)
  recipeId    Int
  recipe      Recipe          @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  yieldSold   Int
  sellPriceId Int
  sellPrice   RecipeSellPrice @relation(fields: [sellPriceId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([recipeId])
  @@index([sellPriceId])
  @@map("sale_item")
}
